

`id`
  :Description: A sequential integer value assigned to each algorithm.
                It is used solely for internal programming logic.

  :Data Type:   Integer

.. _dmg_algo_component_type:

`component_type`
  :Description: The type of component, based on the typology definitions
                being used in the system model.

                Example: 'Demineralisation Plant'

  :Data Type:   Alphanumeric characters.
                May use dashes '-' or underscores '_'.
                Avoid using special characters.


.. _dmg_algo_damage_state:

`damage_state`
  :Description: The list of discrete damage states used in defining the
                damage scale being modelled within the system. The 'None'
                damage state is not explicitly listed.

                Example: For a four-state sequential damage scale,
                the following damage states are used:

                1. DS1 Slight
                2. DS2 Moderate
                3. DS3 Extensive
                4. DS4 Complete

  :Data Type:   String. Fixed, pre-determined state names.


`is_piecewise`
  :Description: Flag that states whether the function is piecewise
                defined, or defined by a single function.

  :Data Type:   String ['yes', 'no']


`damage_function`
  :Description: Name of the probability distribution representing the
                damage function. This should be a Cumulative Distribution
                Function (CDF).

                Log-normal curves are predominant in this discipline.
                However, any function can be supported by adding its
                definition to the module `sira.modelling.responsemodels`.

                Example: 'lognormal'

  :Data Type:   String. MUST match name of a function defined in 
                `sira.modelling.responsemodels`.


`median`
  :Description: Median of the damage function. 
                This corresponds to the 'scale' parameter of the
                lognormal implementation in scipy. 

                For scipy lognormal implementation, 
                :math:`\text{scale} = \text{median} = \mathrm{e}^{\mu}`,
                where |mu| is the mean of the log of the samples.

                A median will need to be defined for each damage state.
                It should typically be progressively higher for more
                severe damage states:

                :math:`{\mu_{DS1} \leq \mu_{DS2} \leq \mu_{DS3} \leq \mu_{DS4}}`

  :Data Type:   Float.


`beta`
  :Description: The log-standard deviation, or put another way,
                the standard deviation of the log of the variate.
                This corresponds to the 'shape' parameter of the
                lognormal implementation in scipy.

                It will need to be defined for each damage state.
                The value of beta should be such that
                the curves for the defined damaged states do not overlap.

  :Data Type:   Float.


`location`
  :Description: The location parameter for lognormal function, as
                implemented in scipy. In scipy it is used primarily for
                the purpose of having a common method for defining all
                functions. In practice, we always set it to zero.

  :Data Type:   Float.


`damage_ratio`
  :Description: The fractional loss of a component's value resulting from
                incurred damages resulting it being in a given damage state.
                This parameter links a damage state to expected direct loss,
                expressed as a fraction of total component value.

                Example:
                Damage ratio of 0.30 for damage state "DS2 Moderate"

  :Data Type:   Float.
                :math:`{\{x \in \mathbb{R} \mid 0.0 \leq x\}}`.
                A value of 0 indicates no loss of value, and
                a value of 1.0 indicates complete loss.
                In special cases the the value of loss ratio can be
                greater than 1.0, which indicates complete loss of
                component and additional cost of removal, disposal, or
                securing of destroyed component.


`functionality`
  :Description: An unitless normalised value indicating the functional
                capacity of a component for a given damage state.
                This parameter links a damage state to expected
                post-impact residual functionality (or production capacity)
                of the component.

                Example:
                A stack of a thermal power station may be expected to
                remain fully functional (functionality==1), under 'Slight'
                damage state, e.g. under conditions of minor damage to
                structure with deformation of holding down bolts and with
                some bracing connections.

  :Data Type:   Float.
                :math:`{\{x \in \mathbb{R} \mid 0.0 \leq x \leq 1.0\}}`.

                A value of 0 indicates no loss of value, and
                a value of 1.0 indicates complete loss.
                In special cases the the value of loss ratio can be
                greater than 1.0, which indicates complete loss of
                component and additional cost of removal, disposal, or
                securing or destroyed component.


`minimum`
  :Description: Minimum value for which the damage algorithm is
                applicable.

                Example:
                The algorithms presented by Anagnos :cite:`Anagnos1999`
                for 500kV circuit breakers are only applicable for
                PGA values of 0.15g and above, for the various noted
                failure modes.

  :Data Type:   Float.


`upper_limit`
  :Description: The maximum value of hazard intensity for which
                the given algorithm may be applicable.

  :Data Type:   Float.
                If upper limit is not explicity defined for an
                algorithm, use 'NA'.


`lower_limit`
  :Description: The minimum value of hazard intensity for which
                the given algorithm may be applicable.

  :Data Type:   Float.
                If upper limit is not explicity defined for an
                algorithm, use 'NA'.


`recovery_function`
  :Description: Name of the probability distribution representing the
                damage function. 

                Normal CDF, traingular function or a uniform distribution
                function are commmon examples for recovery functions.
                However, any function can be supported by adding its
                definition to the module `sira.modelling.responsemodels`.

                Example: 'Normal'

  :Data Type:   String. MUST match name of a function defined in 
                `sira.modelling.responsemodels`.


`recovery_param1`
  :Description: The first param of the recovery function. This is the 'location'
                paramter. For a Normal distribution, it is the mean of the distribution.

  :Data Type:   Float.


`recovery_param2`
  :Description: The second param of the recovery function. This is the 'scale'
                paramter. For a Normal distribution, it is the standard deviation
                of the distribution.
                
  :Data Type:   Float.


`recovery_95percentile`
  :Description: [Optional paramter]
                In the process of expert elicitation of recovery parameters,
                it is often difficult to get the concept of standard
                deviation across to an audience of experts unpracticed
                in statistical concepts. In such cases it is easier to
                obtain a 95th percentile value for recovery time, and
                translate that to standard deviation for a normal
                distribution using the following equation:

                .. math::

                    \begin{align}
                    &X_{0.95} = \mu + Z_{0.95} \sigma \\
                    \Rightarrow &X_{0.95} = \mu + \Phi^{-1}(0.95) \sigma \\
                    \Rightarrow &\sigma = \frac{X_{0.95} - \mu}{\Phi^{-1}(0.95)}
                    \end{align}

  :Data Type:   Float


`data_source`
  :Description: Source or reference from which the fragility algorithm
                was taken or adapted, how it was adapted, or how it
                was developed.

  :Data Type:   Free text
