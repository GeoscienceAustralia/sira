"""
This test was generated by AI and tested by a human.
"""

import pytest
from sira.modelling.iodict import IODict

def test_initialization():
    """Test IODict initialization with different input types"""
    # Empty initialization
    io_dict = IODict()
    assert len(io_dict) == 0
    assert io_dict.key_index == {}

    # Dict initialization
    io_dict = IODict({'a': 1, 'b': 2})
    assert len(io_dict) == 2
    assert io_dict.key_index == {0: 'a', 1: 'b'}

    # Keyword args initialization
    io_dict = IODict(a=1, b=2)
    assert len(io_dict) == 2
    assert io_dict.key_index == {0: 'a', 1: 'b'}

def test_order_preservation():
    """Test that order is preserved"""
    items = [('d', 4), ('b', 2), ('c', 3), ('a', 1)]
    io_dict = IODict(items)

    assert list(io_dict.keys()) == ['d', 'b', 'c', 'a']
    assert list(io_dict.values()) == [4, 2, 3, 1]
    assert io_dict.key_index == {0: 'd', 1: 'b', 2: 'c', 3: 'a'}

def test_index_access():
    """Test accessing items by index"""
    io_dict = IODict([('a', 1), ('b', 2), ('c', 3)])

    assert io_dict.index(0) == 1
    assert io_dict.index(1) == 2
    assert io_dict.index(2) == 3

    with pytest.raises(KeyError):
        io_dict.index(3)

def test_dynamic_updates():
    """Test key_index updates when dict is modified"""
    io_dict = IODict(a=1, b=2)

    # Test addition
    io_dict['c'] = 3
    assert io_dict.key_index == {0: 'a', 1: 'b', 2: 'c'}

    # Test overwrite
    io_dict['b'] = 5
    assert io_dict.key_index == {0: 'a', 1: 'b', 2: 'c'}
    assert io_dict['b'] == 5

def test_base_functionality():
    """Test that basic OrderedDict functionality is preserved"""
    io_dict = IODict([('a', 1), ('b', 2)])

    # Dict-like access
    assert io_dict['a'] == 1
    assert 'b' in io_dict

    # Iteration
    assert list(io_dict.items()) == [('a', 1), ('b', 2)]
